{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$comment": "https://docs.getdbt.com/reference/declaring-properties",
    "definitions": {
        "not_null": {
            "description": "This test validates that there are no null values present in a column.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/tests#not_null",
            "anyOf": [
                {
                    "type": "object",
                    "properties": {
                        "severity": {
                            "$ref": "#/definitions/severity"
                        },
                        "tags": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                }, {
                    "type": "string",
                    "enum": ["not_null"]
                }
            ]
        },
        "unique": {
            "description": "This test validates that there are no duplicate values present in a field.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/tests#unique",
            "anyOf": [
                {
                    "type": "object",
                    "properties": {
                        "severity": {
                            "$ref": "#/definitions/severity"
                        },
                        "tags": {
                            "$ref": "#/definitions/tags"
                        }
                    }
                }, {
                    "type": "string",
                    "enum": ["unique"]
                }
            ]
        },
        "accepted_values": {
            "$comment": "https://docs.getdbt.com/reference/resource-properties/tests#accepted_values",
            "type": "object",
            "description": "This test validates that all of the values in a column are present in a supplied list of values.",
            "properties": {
                "values": {
                    "type":"array"
                },
                "severity": {
                    "$ref": "#/definitions/severity"
                },
                "tags": {
                    "$ref": "#/definitions/tags"
                }
            },
            "required": ["values"]
        },
        "relationships":{
            "description": "Ok then",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/tests#relationships",
            "type": "object",
            "properties": {
                "to": {
                    "type":"string",
                    "description": "no idea"
                }
            },
            "additionalProperties": false
        },
        "test": {
            "anyOf": [{"$ref": "#/definitions/relationships"}, {"$ref": "#/definitions/not_null"}, {"$ref": "#/definitions/unique"}, {"$ref": "#/definitions/accepted_values"}]
        },
        "tests": {
            "description": "The tests field is used to assert properties of a column or table.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/test"
            }
        },
        "severity":{
            "type": "string",
            "enum": ["warn", "error"],
            "description": "The \"severity\" of a test can be configured by supplying the severity configuration option in the test specification. The severity option can be one of warn or error. If warn is supplied, then dbt will log a warning for any failing tests, but the test will still be considered passing. This configuration is useful for tests in which a failure does not imply that action is required.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/tests/#severity"
        },
        "description": {
            "type": "string",
            "description": "A user-defined description.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/description/"
        },
        "meta": {
            "type": "object",
            "description": "The meta field can be used to set metadata for a model. This metadata is compiled into the manifest.json file generated by dbt, and is viewable in the auto-generated documentation.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/meta/"
        },
        "loaded_at_field": {
            "type": "string",
            "description": "A column name (or expression) that returns a timestamp indicating freshness.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/freshness/#loaded_at_field"
        },
        "tags": {
            "type": "array",
            "description": "The tags property can be used to set tags for a source or source table.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/tags/",
            "items": {
                "type":"string"
            }
        },
        "freshness": {
            "type": "object",
            "description": "A freshness block is used to define the acceptable amount of time between the most recent record, and now, for a table to be considered \"fresh\".",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/freshness/",
            "properties": {
                "warn_after": {
                    "$ref": "#/definitions/freshness_node"
                },
                "error_after": {
                    "$ref": "#/definitions/freshness_node"
                },
                "filter": {
                    "type": "string",
                    "description": "Add a where clause to the query run by dbt source snapshot-freshness in order to limit data scanned.",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/freshness/#filter"
                }
            },
            "additionalProperties": false
        },
        "freshness_node": {
            "type":"object",
            "properties": {
                "count": {
                    "type":"integer",
                    "description": "A positive integer for the number of periods where a data source is still considered \"fresh\".",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/freshness/#count"
                },
                "period": {
                    "type":"string",
                    "enum": ["minute", "hour", "day"],
                    "description": "The time period used in the freshness calculation. One of minute, hour or day",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/freshness/#period"
                }
            },
            "additionalProperties": false
        },
        "quoting": {
            "type": "object",
            "description": "Optionally configure whether dbt should quote databases, schemas, and identifiers when resolving a {{ source() }} function to a direct relation reference.",
            "$comment": "https://docs.getdbt.com/reference/resource-properties/quoting/",
            "properties": {
                "database": {
                    "type": "boolean"
                },
                "schema": {
                    "type": "boolean"
                },
                "identifier": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "table": {
            "type": "object",
            "description": "A source table.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the source table. Required."
                },
                "description": {
                    "$ref": "#/definitions/description"
                },
                "meta": {
                    "$ref": "#/definitions/meta"
                },
                "identifier": {
                    "type": "string",
                    "description": "The table name as stored in the database. This parameter is useful if you want to use a source table name that differs from the table name in the database.",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/identifier/"
                },
                "loaded_at_field": {
                    "$ref": "#/definitions/loaded_at_field"
                },
                "tags": {
                    "$ref": "#/definitions/tags"
                },
                "freshness": {
                    "$ref": "#/definitions/freshness"
                },
                "quoting": {
                    "$ref": "#/definitions/quoting"
                },
                "tests": {
                    "$ref": "#/definitions/tests"
                }
            }
        },
        "source": {
            "type": "object",
            "$comment": "https://docs.getdbt.com/reference/source-properties",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the source. Required."
                },
                "description": {
                    "$ref": "#/definitions/description"
                },
                "database": {
                    "type": "string",
                    "description": "The database that your source is stored in.",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/database/"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema name as stored in the database.",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/schema/"
                },
                "loader": {
                    "type": "string",
                    "description": "Describe the tool that loads this source into your warehouse. Note that this property is for documentation purposes only â€” dbt does not meaningfully use this.",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/loader/"
                },
                "loaded_at_field": {
                    "$ref": "#/definitions/loaded_at_field"
                },
                "meta": {
                    "$ref": "#/definitions/meta"
                },
                "tags": {
                    "$ref": "#/definitions/tags"
                },
                "overrides": {
                    "type": "string",
                    "description": "Override a source defined in an included package. The properties defined in the overriding source will be applied on top of the base properties of the overridden source.",
                    "$comment": "https://docs.getdbt.com/reference/resource-properties/overrides/"
                },
                "freshness": {
                    "$ref": "#/definitions/freshness"
                },
                "quoting": {
                    "$ref": "#/definitions/quoting"
                },
                "tables": {
                    "type": "array",
                    "description": "dem tables",
                    "items": {
                        "$ref": "#/definitions/table"
                    }
                }
            }
        }
    },
    "properties": {
        "version": {
            "$comment": "https://docs.getdbt.com/reference/declaring-properties/#faqs",
            "type": "number",
            "description": "Major version of this schema.",
            "default": 2
        },
        "sources": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/source"
            }
        }
    }
}
